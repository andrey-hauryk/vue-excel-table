export interface TableProps {
  modelValue: Array<Record<string, any>>;
  columns: Array<ColumnProps>;
  page?: number;
  noPaging?: boolean;
  noNumCol?: boolean;
  filterRow?: boolean;
  noFooter?: boolean;
  noFinding?: boolean;
  noFindingNext?: boolean;
  freeSelect?: boolean;
  autocomplete?: boolean;
  autocompleteCount?: number;
  readonly?: boolean;
  readonlyStyle?: Record<string, any>;
  height?: string;
  width?: string;
  rowStyle?: (row: Record<string, any>) => Record<string, any> | null;
  cellStyle?: (cell: Record<string, any>) => Record<string, any> | null;
  headerLabel?: (fieldLabel: string, field: Record<string, any>) => string;
  recordLabel?: (recordPosition: number, record: Record<string, any>) => string;
  localizedLabel?: Record<string, string>;
  nFilterCount?: number;
  remember?: boolean;
  enterToSouth?: boolean;
  allowAddCol?: boolean;
  addColumn?: () => Record<string, any>;
  noHeaderEdit?: boolean;
  spellcheck?: boolean;
  newIfBottom?: boolean;
  disablePanelSetting?: boolean;
  disablePanelFilter?: boolean;
  noMouseScroll?: boolean;
  noSorting?: boolean;
  noMassUpdate?: boolean;
  singleSelect: boolean;
  selectedRows: Array<string>;
  selectionField: string;
  disableSelection: Boolean;
}

export interface ColumnProps {
  field: string;
  label?: string | null;
  type: 'string' | 'number' | 'boolean' | 'date' | 'datetick' | 'map' | 'password' | 'list' | 'action';
  initStyle?: Record<string, any> | (() => Record<string, any>);
  width?: string;
  invisible?: boolean;
  readonly?: boolean | null;
  textTransform?: 'uppercase' | 'lowercase' | null;
  textAlign?: 'left' | 'right' | 'center' | null;
  keyField?: boolean;
  sticky?: boolean;
  listByClick?: boolean | null;
  validate?: (value: any) => boolean;
  change?: (value: any) => void;
  link?: () => void;
  isLink?: () => boolean;
  format?: string;
  cellClick?: (event: Event) => void;
  autoFillWidth?: boolean;
  hideDuplicate?: boolean;
  grouping?: string | null;
  allowKeys?: string[] | (() => string[]);
  mandatory?: string;
  lengthLimit?: number;
  autocomplete?: boolean | null;
  pos?: number;
  options?: any[] | Record<string, any> | ((input: any) => any);
  summary?: string | null;
  sort?: (a: any, b: any) => number;
  sorting?: (data: any[]) => any[];
  noSorting?: boolean | null;
  masking?: string;
  placeholder?: string;
  valueFormatter?: (value: any, record: any) => string;
  toValue?: (text: string) => any;
  toText?: (val: any, record: any) => string;
  register?: () => void;
  render?: (row: any) => Node,
}