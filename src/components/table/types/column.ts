export interface ColumnProps {
  field: string;
  label: string | null;
  type: 'string' | 'number' | 'boolean' | 'date' | 'datetick' | 'map' | 'password' | 'list' | 'action';
  initStyle?: Record<string, any> | (() => Record<string, any>) | null;
  width?: string;
  invisible?: boolean;
  readonly?: boolean | null;
  textTransform?: 'uppercase' | 'lowercase' | null;
  textAlign?: 'left' | 'right' | 'center' | null;
  keyField?: boolean;
  sticky?: boolean;
  listByClick?: boolean | null;
  validate?: (value: any, prev?: any, record?: any, field?: ColumnProps) => string | null | undefined;
  change?: (value: any) => void;
  link?: () => void | null;
  isLink?: () => boolean | null;
  format?: string;
  cellClick?: (event: Event) => void;
  autoFillWidth?: boolean;
  hideDuplicate?: boolean;
  grouping?: string | null;
  allowKeys?: string[] | (() => string[]) | null;
  mandatory?: string;
  lengthLimit?: number;
  autocomplete?: boolean | null;
  pos?: number;
  options?: any[] | Record<string, any> | ((input: any) => Record<string, any>) | null;
  summary?: string | null;
  sort?: (a: any, b: any) => number;
  sorting?: (data: any[]) => any[];
  noSorting?: boolean | null;
  masking?: string;
  placeholder?: string;
  valueFormatter?: (value: any, record: any) => string | null;
  toValue?: (text: string) => any;
  toText?: (val: any, record: any) => string;
  register?: () => void | null;
  render?: (row: any) => Node | null;
}
